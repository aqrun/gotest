// Code generated by go-bindata.
// sources:
// assets/test.js
// templates/index.gohtml
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTestJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\xd4\x48\x2b\xcd\x4b\x2e\xc9\xcc\xcf\xd3\xd0\xac\xe6\xe5\x52\x50\x50\x50\x48\xce\xcf\x2b\xce\xcf\x49\xd5\xcb\xc9\x4f\xd7\x50\x2a\xc9\xc8\x2c\x56\xc8\x2c\x56\x48\x54\x28\x49\x2d\x2e\x51\xd2\xe4\xe5\xaa\xd5\xd4\xd0\xb4\x06\x04\x00\x00\xff\xff\x02\x78\x19\x34\x37\x00\x00\x00")

func assetsTestJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsTestJs,
		"assets/test.js",
	)
}

func assetsTestJs() (*asset, error) {
	bytes, err := assetsTestJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/test.js", size: 55, mode: os.FileMode(438), modTime: time.Unix(1512400768, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\xcd\x6a\xc3\x30\x10\x84\xef\x06\xbf\xc3\x56\xe7\x28\x6a\x6e\x3d\x48\x86\x52\x28\x7d\x80\x06\x7a\x55\xa4\x25\xda\xa2\x1f\xd7\xda\xfc\x11\xf2\xee\x25\x56\x68\xb1\x2e\x62\xbf\x91\x86\x61\x56\x3f\xf9\xe2\xf8\x32\x22\x04\x4e\x71\xe8\x3b\x7d\xbf\x21\xda\xbc\x37\x02\xb3\x98\x09\x5a\x3f\xf4\x1d\x00\x80\x4e\xc8\x16\x5c\xb0\x53\x45\x36\x62\xfb\xf9\x2e\x5f\xc4\x42\xcb\x36\xa1\x11\x47\xc2\xd3\x58\x26\x16\x4d\x6a\xc7\x95\xcc\x98\xd9\x88\x13\x79\x0e\xc6\xe3\x91\x1c\xca\x79\x58\xc1\xa1\xe2\x24\xab\xb3\xd1\xee\x22\x9a\x5c\x56\x40\x99\x98\x6c\x9c\x21\x9a\xcd\xfa\x79\x05\xc9\x9e\x29\x1d\xd2\x02\x51\x5e\xa2\x65\x9c\xc0\x3c\x4a\xfc\x39\xd0\xd1\x88\x2f\xb9\x7d\x95\x6f\x25\x8d\x96\x69\x17\x51\xfc\x07\x22\x34\xe8\xf7\xf8\xf7\x95\x89\x23\x0e\x94\x3d\x9e\xb5\x6a\x43\xdf\xf5\x9d\x56\x8f\x2a\xf4\xae\xf8\x4b\x43\xd5\x4d\x34\x32\xd4\xc9\x19\xa1\x6c\xad\xc8\x55\x31\x56\x5e\x7f\x57\x31\x68\xd5\xe4\xf6\x34\x6c\x86\x0f\x82\xeb\xf5\x5e\xd1\xed\xa6\x55\xd8\x3c\x5c\x1f\x6e\x5a\xcd\x3b\xf8\x0d\x00\x00\xff\xff\x06\xa3\x5c\xd6\x93\x01\x00\x00")

func templatesIndexGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexGohtml,
		"templates/index.gohtml",
	)
}

func templatesIndexGohtml() (*asset, error) {
	bytes, err := templatesIndexGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.gohtml", size: 403, mode: os.FileMode(438), modTime: time.Unix(1512403300, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/test.js": assetsTestJs,
	"templates/index.gohtml": templatesIndexGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"test.js": &bintree{assetsTestJs, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"index.gohtml": &bintree{templatesIndexGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

